################################################################################
#
#  This file contains per-layer settings that configure layer behavior at
#  execution time. Comments in this file are denoted with the "#" char.
#  Settings lines are of the form:
#      "<LayerIdentifier>.<SettingName> = <SettingValue>"
#
#  <LayerIdentifier> is typically the official layer name, minus the VK_LAYER
#  prefix and all lower-camel-case -- i.e., for VK_LAYER_KHRONOS_validation,
#  the layer identifier is 'khronos_validation'.
#
################################################################################
################################################################################
# Validation Layer Common Settings:
# =================================
#
#   DEBUG_ACTION:
#   =============
#   <LayerIdentifier>.debug_action : This is an enum value indicating what
#    action is to be taken when a layer wants to report information.
#    Possible settings values are defined in the vk_layer.h header file.
#    These settings are:
#    VK_DBG_LAYER_ACTION_IGNORE - Take no action.
#    VK_DBG_LAYER_ACTION_LOG_MSG - Log a txt message to stdout or to a log filename
#       specified via the <LayerIdentifier>.log_filename setting (see below).
#    VK_DBG_LAYER_ACTION_CALLBACK - Call user defined callback function(s) that
#       have been registered via the VK_EXT_debug_report extension. Since
#       app must register callback, this is a NOOP for the settings file.
#    VK_DBG_LAYER_ACTION_DEBUG_OUTPUT [Windows only] - Log a txt message using the
#       Windows OutputDebugString function -- messages will show up in the
#       Visual Studio output window, for instance.
#    VK_DBG_LAYER_ACTION_BREAK - Trigger a breakpoint.
#
#   REPORT_FLAGS:
#   =============
#   <LayerIdentifier>.report_flags : This is a comma-delineated list of options
#    telling the layer what types of messages it should report back.
#    Options are:
#    info - Report informational messages.
#    warn - Report warnings from using the API in a manner which may lead to
#           undefined behavior or to warn the user of common trouble spots.
#           A warning does NOT necessarily signify illegal application behavior.
#    perf - Report using the API in a way that may cause suboptimal performance.
#    error - Report errors in API usage.
#    debug - For layer development. Report messages for debugging layer
#            behavior.
#
#   LOG_FILENAME:
#   =============
#   <LayerIdentifier>.log_filename : output filename. Can be relative to
#      location of vk_layer_settings.txt file, or an absolute path. If no
#      filename is specified or if filename has invalid path, then stdout
#      is used by default.
#
#   DISABLES:
#   =============
#   <LayerIdentifier>.disables : comma separated list of feature/flag/disable enums
#      These can include VkValidationFeatureDisableEXT flags defined in the Vulkan
#      specification, or ValidationCheckDisables enums defined in chassis.h.
#      Effects of setting these flags are described in the specification (or the
#      source code in the case of the ValidationCheckDisables). The most useful
#      flags are briefly described here:
#      VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT - disables handle wrapping.
#          Disable this feature if you are running into crashes when authoring new extensions
#          or developing new Vulkan objects/structures
#      VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT - disables thread checks. It may
#          help with performance to run with thread-checking disabled most of the time,
#          enabling it occasionally for a quick sanity check, or when debugging difficult
#          application behaviors.
#      VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT - disables the main, heavy-duty
#          validation checks. This may be valuable early in the development cycle to
#          reduce validation output while correcting paramter/object usage errors.
#      VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT - disables stateless parameter
#          checks. This may not always be necessary late in a development cycle.
#      VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT - disables object tracking.
#          This may not always be necessary late in a development cycle.
#
#   ENABLES:
#   =============
#   <LayerIdentifier>.enables : comma separated list of feature enable enums
#      These can include VkValidationFeatureEnableEXT flags defined in the Vulkan
#      specification, where their effects are described.  The most useful
#      flags are briefly described here:
#      VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT - enables intrusive GPU-assisted
#      shader validation in khronos validation layers
#      VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT - enables best practices warning
#      validation
#

# VK_LAYER_KHRONOS_validation Settings

khronos_validation.debug_action = VK_DBG_LAYER_ACTION_LOG_MSG
khronos_validation.report_flags = error,warn,perf
khronos_validation.log_filename = stdout

# Example entry showing how to disable threading checks and validation at DestroyPipeline time
#khronos_validation.disables = VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT,VALIDATION_CHECK_DISABLE_DESTROY_PIPELINE

# Example entry showing how to Enable GPU-Assisted Validation
#khronos_validation.enables = VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT,VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT

# Example entry showing how to Enable Best Practices Validation
#khronos_validation.enables = VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT

################################################################################
################################################################################
#
#  This file contains per-layer settings that configure layer behavior at
#  execution time. Comments in this file are denoted with the "#" char.
#  Settings lines are of the form:
#      "<LayerIdentifier>.<SettingName> = <SettingValue>"
#
#  <LayerIdentifier> is typically the official layer name, minus the VK_LAYER
#  prefix and all lower-camel-case -- i.e., for VK_LAYER_LUNARG_api_dump, the
#  layer identifier is 'lunarg_api_dump'.
#
################################################################################
################################################################################
#  VK_LAYER_LUNARG_api_dump Settings:
#  ==================================
#
#    OUTPUT_FORMAT:
#    =========
#    <LayerIdentifer>.output_format : Specifies the format used for output;
#    can be Text (default -- outputs plain text) or Html.
#
#    DETAILED:
#    =========
#    <LayerIdentifer>.detailed : Setting this to TRUE causes parameter details
#    to be dumped in addition to API calls.
#
#    NO_ADDR:
#    ========
#    <LayerIdentifier>.no_addr : Setting this to TRUE causes "address" to be
#    dumped in place of hex addresses.
#
#    FILE:
#    =====
#    <LayerIdentifer>.file : Setting this to TRUE indicates that output
#    should be written to file instead of STDOUT.
#
#    LOG_FILENAME:
#    =============
#    <LayerIdentifer>.log_filename : Specifies the file to dump to when
#    "file = TRUE".  The default is "vk_apidump.txt".
#
#    FLUSH:
#    ======
#    <LayerIdentifier>.flush : Setting this to TRUE causes IO to be flushed
#    each API call that is written.
#
#    INDENT SIZE:
#    ==============
#    <LayerIdentifier>.indent_size : Specifies the number of spaces that a tab
#    is equal to.
#
#    SHOW TYPES:
#    ==============
#    <LayerIdentifier>.show_types : Setting this to TRUE causes types to be
#    dumped in addition to values.
#
#    NAME SIZE:
#    ==============
#    <LayerIdentifier>.name_size : The number of characters the name of a
#    variable should consume, assuming more are not required.
#
#    TYPE SIZE:
#    ==============
#    <LayerIdentifier>.type_size : The number of characters the type of a
#    variable should consume, assuming more are not requires.
#
#    USE_SPACES:
#    ==============
#    <LayerIdentifier>.use_spaces : Setting this to TRUE causes all tabs
#    characters to be replaced with spaces.
#
#    SHOW_SHADER:
#    ==============
#    <LayerIdentifier>.show_shader : Setting this to TRUE causes the shader
#    binary code in pCode to be also written to output.
#
#    OUTPUT_RANGE:
#    ==============
#    <LayerIdentifer>.output_range : Comma separated list of ranges to dump. 
#    Range format is "S-C-I" with S being the start frame, C is the count of
#    frames, and I the interval between dumped frames. A count of 0 will 
#    output every frame after the start of the range. Examples: "2-6-2" would
#    will dump frames 2, 4, and 6. "3,4,6-0" will dump frames 3,4,6 and every 
#    frame after it.

#  VK_LUNARG_LAYER_api_dump Settings
lunarg_api_dump.output_format = Text
lunarg_api_dump.detailed = TRUE
lunarg_api_dump.no_addr = FALSE
lunarg_api_dump.file = FALSE
lunarg_api_dump.log_filename = vk_apidump.txt
lunarg_api_dump.flush = TRUE
lunarg_api_dump.indent_size = 4
lunarg_api_dump.show_types = TRUE
lunarg_api_dump.name_size = 32
lunarg_api_dump.type_size = 0
lunarg_api_dump.use_spaces = TRUE
lunarg_api_dump.show_shader = FALSE
lunarg_api_dump.output_range = 0-0
lunarg_api_dump.show_timestamp = FALSE

################################################################################
#  VK_LAYER_LUNARG_device_simulation Settings:
#  ===========================================
#
#    FILENAME:
#    =========
#    <LayerIdentifer>.filename : Name of one or more configuration file(s) to load.
#    Added in v1.2.1: This variable can have a delimited list of files to be loaded.
#    On Windows, the delimiter is ';' else it is ':'. Files are loaded in order.
#    Later files can override settings from earlier files.
#
#    DEBUG_ENABLE:
#    =============
#    <LayerIdentifer>.debug_enable : A non-zero integer enables debug message output.
#
#    EXIT_ON_ERROR:
#    ==============
#    <LayerIdentifer>.exit_on_error : A non-zero integer enables exit-on-error.

# VK_LUNARG_LAYER_device_simulation Settings
lunarg_device_simulation.filename = 
lunarg_device_simulation.debug_enable = 0
lunarg_device_simulation.exit_on_error = 0

################################################################################
#  VK_LAYER_LUNARG_screenshot Settings:
#  ====================================
#
#    FRAMES:
#    =======
#    <LayerIdentifer>.frames : Comma separated list of frames to output as
#    screen shots or a range of frames with a start, count, and optional
#    interval separated by a dash. Setting the variable to \"all\" will output
#    every frame. Example: \"5-8-2\" will output frame 5, continue until frame 13,
#    dumping every other frame. Example: \"3,8-2\" will output frames 3, 8, and 9.
#
#    DIR:
#    ====
#    <LayerIdentifer>.dir : This can be set to specify the directory in which to
#    create the screenshot files.
#
#    FORMAT:
#    =======
#    <LayerIdentifer>.format : This can be set to a color space for the output.

# VK_LUNARG_LAYER_screenshot Settings
lunarg_screenshot.frames = 0-0
lunarg_screenshot.dir = 
lunarg_screenshot.format = USE_SWAPCHAIN_COLORSPACE
